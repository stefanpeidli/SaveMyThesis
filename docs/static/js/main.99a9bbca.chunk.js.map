{"version":3,"sources":["components/Header.js","components/Editor.js","components/Preview.js","components/DiffPreview.js","components/HistoryItem.js","components/History.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Box","background","height","justify","pad","Editor","_ref","text","onChangeText","fill","width","TextArea","placeholder","value","onChange","event","target","Preview","rawText","border","overflow","vertical","Markdown","mockVersion","commitTitle","commitText","oldText","newText","DiffPreview","versionId","_useState","useState","_useState2","Object","slicedToArray","fetching","setFetching","_useState3","_useState4","version","setVersion","useEffect","setTimeout","align","direction","react_loading_default","type","color","Heading","level","concat","Paragraph","lib_default","oldValue","newValue","ICON_MAP","change","Edit","add","AddCircle","remove","Trash","HistoryItem","timestamp","author","onClick","commitPredicate","split","toLowerCase","className","side","style","backgroundColor","marginLeft","Radial","Text","size","Date","toDateString","History","history","onClickItem","elevation","weight","components_HistoryItem","getTime","map","_ref2","id","key","mockHistory","App","state","activeVersion","handleEditorTextChange","editedText","_this","setState","handleClickHistoryItem","components_Header","this","components_DiffPreview","Fragment","components_Editor","components_Preview","components_History","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uPAgBeA,EAbA,WACb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,WAAW,QACXC,OAAO,UACPC,QAAQ,SACRC,IAAI,SAJN,0BCeWC,EAjBA,SAAAC,GAA4B,IAAzBC,EAAyBD,EAAzBC,KAAMC,EAAmBF,EAAnBE,aACtB,OACEX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEI,IAAI,SACJK,KAAK,WACLC,MAAM,OAENb,EAAAC,EAAAC,cAACY,EAAA,EAAD,CACEC,YAAY,gCACZH,MAAI,EACJI,MAAON,EACPO,SAAU,SAAAC,GAAK,OAAIP,EAAaO,EAAMC,OAAOH,qBCUtCI,EArBC,SAAAX,GAAiB,IAAdY,EAAcZ,EAAdY,QACjB,OACErB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEI,IAAI,SACJK,KAAK,WACLC,MAAM,OAENb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEmB,OAAO,MACPV,KAAK,WACLL,IAAI,SACJgB,SAAU,CAAEC,SAAU,WAEtBxB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,KACGJ,kECZLK,EAAc,CAClBC,YAAa,mBACbC,WAAY,+CACZC,QAAS,WACTC,QAAS,YA6DIC,EA1DK,SAAAtB,GAAmB,IAAhBuB,EAAgBvB,EAAhBuB,UAAgBC,EACHC,oBAAS,GADNC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAC7BK,EAD6BH,EAAA,GACnBI,EADmBJ,EAAA,GAAAK,EAELN,mBAAS,CACvCN,WAAY,GACZD,YAAa,GACbE,QAAS,GACTC,QAAS,KAN0BW,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAE7BE,EAF6BD,EAAA,GAEpBE,EAFoBF,EAAA,GAiBrC,OARAG,oBAAU,WACRC,WAAW,WAETF,EAAWjB,GACXa,GAAY,IACX,OAIHvC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEI,IAAI,SACJK,KAAK,WACLC,MAAM,OAELyB,EACCtC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEG,QAAQ,SACRwC,MAAM,SACNC,UAAU,MACVnC,MAAI,GAEJZ,EAAAC,EAAAC,cAAC8C,EAAA/C,EAAD,CACEgD,KAAK,OACLC,MAAM,UACN7C,OAAO,QACPQ,MAAM,WAIVb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEmB,OAAO,MACPV,KAAK,WACLL,IAAI,SACJgB,SAAS,UAETvB,EAAAC,EAAAC,cAACiD,EAAA,EAAD,CAASC,MAAO,GAAhB,IAAAC,OACOrB,EADP,OAAAqB,OACsBX,EAAQf,cAE9B3B,EAAAC,EAAAC,cAACoD,EAAA,EAAD,KAAYZ,EAAQd,YACpB5B,EAAAC,EAAAC,cAACqD,EAAAtD,EAAD,CACEuD,SAAUd,EAAQb,QAClB4B,SAAUf,EAAQZ,sDC1DxB4B,EAAW,CACfC,OAAU3D,EAAAC,EAAAC,cAAC0D,EAAA,EAAD,MACVC,IAAO7D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,MACPC,OAAU/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,OAuCGC,EApCK,SAAAxD,GAAiD,IAA9CkB,EAA8ClB,EAA9CkB,YAAauC,EAAiCzD,EAAjCyD,UAAWC,EAAsB1D,EAAtB0D,OAAQC,EAAc3D,EAAd2D,QAC/CC,EAAkB1C,EAAY2C,MAAM,KAAK,GAAGC,cAElD,OACEvE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEqE,UAAU,UACVzB,UAAU,MACVqB,QAAS,kBAAMA,MAEfpE,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACES,KAAK,WACLU,OAAQ,CACNmD,KAAM,OACNvB,MAAO,UAET5C,QAAQ,UAERN,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEuE,MAAO,CACLC,gBAAiB,QACjBC,WAAY,UAGblB,EAASW,IAAoBrE,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,QAGlC7E,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKI,IAAI,QAAQD,QAAQ,UACvBN,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,KAAOnD,GACP3B,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAMC,KAAK,SAAX,GAAA1B,OACM,IAAI2B,KAAKd,GAAWe,eAD1B,QAAA5B,OAC+Cc,OCIxCe,EAtCC,SAAAzE,GAA8B,IAA3B0E,EAA2B1E,EAA3B0E,QAASC,EAAkB3E,EAAlB2E,YAC1B,OACEpF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEI,IAAI,SACJK,KAAK,WACLC,MAAM,OAENb,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACES,KAAK,WACLL,IAAI,SACJ8E,UAAU,SACV9D,SAAU,CAAEC,SAAU,WAEtBxB,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAM5B,MAAM,QAAQoC,OAAO,QAA3B,WAGAtF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKI,IAAK,CAAEiB,SAAU,UACpBxB,EAAAC,EAAAC,cAACqF,EAAD,CACE5D,YAAY,kBACZuC,WAAW,IAAIc,MAAOQ,UACtBrB,OAAQ,MACRC,QAAS,kBAAMgB,EAAY,SAE5BD,EAAQM,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,GAAIhE,EAAP+D,EAAO/D,YAAauC,EAApBwB,EAAoBxB,UAAWC,EAA/BuB,EAA+BvB,OAA/B,OACXnE,EAAAC,EAAAC,cAACqF,EAAD,CACEK,IAAKD,EACLhE,YAAaA,EACbuC,UAAWA,EACXC,OAAQA,EACRC,QAAS,kBAAMgB,EAAYO,YCxBnCE,EAAc,CAClB,CACEF,GAAI,EACJhE,YAAa,2BACbuC,UAAW,cACXC,OAAQ,eAEV,CACEwB,GAAI,EACJhE,YAAa,8BACbuC,UAAW,cACXC,OAAQ,eAEV,CACEwB,GAAI,EACJhE,YAAa,gBACbuC,UAAW,cACXC,OAAQ,gBA4CG2B,6MAvCbC,MAAQ,CACNrF,KAAM,GACNsF,cAAe,QAGjBC,uBAAyB,SAAAC,GACvBC,EAAKC,SAAS,CAAE1F,KAAMwF,OAGxBG,uBAAyB,SAAAV,GACvBQ,EAAKC,SAAS,CAAEJ,cAAeL,6EAI/B,OACE3F,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACoG,EAAD,MACAtG,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK4C,UAAU,MAAMnC,KAAK,YACvB2F,KAAKR,MAAMC,cACVhG,EAAAC,EAAAC,cAACsG,EAAD,CAAaxE,UAAWuE,KAAKR,MAAMC,gBAEnChG,EAAAC,EAAAC,cAACF,EAAAC,EAAMwG,SAAP,KACEzG,EAAAC,EAAAC,cAACwG,EAAD,CACEhG,KAAM6F,KAAKR,MAAMrF,KACjBC,aAAc4F,KAAKN,yBAErBjG,EAAAC,EAAAC,cAACyG,EAAD,CAAStF,QAASkF,KAAKR,MAAMrF,QAGjCV,EAAAC,EAAAC,cAAC0G,EAAD,CACEzB,QAASU,EACTT,YAAamB,KAAKF,kCAhCZQ,aCnBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpH,EAAAC,EAAAC,cAACmH,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.99a9bbca.chunk.js","sourcesContent":["import React from 'react';\nimport { Box } from 'grommet';\n\nconst Header = () => {\n  return (\n    <Box\n      background='brand'\n      height='xxsmall'\n      justify='center'\n      pad='small'\n    >\n      SaveMyThesis\n    </Box>\n  );\n}\n \nexport default Header;","import React from 'react';\nimport { Box, TextArea } from 'grommet';\n\nconst Editor = ({ text, onChangeText }) => {\n  return (\n    <Box\n      pad='medium'\n      fill='vertical'\n      width='40%'\n    >\n      <TextArea\n        placeholder='Start writing your text here!'\n        fill\n        value={text}\n        onChange={event => onChangeText(event.target.value)}\n      />\n    </Box>\n  );\n}\n \nexport default Editor;\n","import React from 'react';\nimport { Box, Markdown } from 'grommet';\n\nconst Preview = ({ rawText }) => {\n  return (\n    <Box\n      pad='medium'\n      fill='vertical'\n      width='40%'\n    >\n      <Box\n        border='all'\n        fill='vertical'\n        pad='medium'\n        overflow={{ vertical: 'scroll' }}\n      >\n        <Markdown>\n          {rawText}\n        </Markdown>\n      </Box>\n    </Box>\n  );\n}\n \nexport default Preview;","import React, { useEffect, useState } from 'react';\nimport { Box, Heading, Paragraph } from 'grommet';\nimport ReactDiffViewer from 'react-diff-viewer';\nimport ReactLoading from 'react-loading';\n\nconst mockVersion = {\n  commitTitle: 'Add hello world!',\n  commitText: 'Add new paragraph with hello world. Bla bla.',\n  oldText: 'I am OLD',\n  newText: 'I am NEW'\n}\n\nconst DiffPreview = ({ versionId }) => {\n  const [ fetching, setFetching ] = useState(true)\n  const [ version, setVersion ] = useState({\n    commitText: '',\n    commitTitle: '',\n    oldText: '',\n    newText: ''\n  })\n\n  useEffect(() => {\n    setTimeout(() => {\n      // Mock http request\n      setVersion(mockVersion)\n      setFetching(false)\n    }, 2000)\n  })\n\n  return (\n    <Box\n      pad='medium'\n      fill='vertical'\n      width='80%'\n    >\n      {fetching ? (\n        <Box\n          justify='center'\n          align='center'\n          direction='row'\n          fill\n        >\n          <ReactLoading\n            type='spin'\n            color='#7D4CDB'\n            height='150px'\n            width='150px'\n          />\n        </Box>\n      ) : (\n        <Box\n          border='all'\n          fill='vertical'\n          pad='medium'\n          overflow='scroll'\n        >\n          <Heading level={3}>\n            {`v${versionId} - ${version.commitTitle}`}\n          </Heading>\n          <Paragraph>{version.commitText}</Paragraph>\n          <ReactDiffViewer\n            oldValue={version.oldText}\n            newValue={version.newText}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n}\n \nexport default DiffPreview;","import React from 'react';\nimport { Box, Text } from 'grommet';\nimport { AddCircle, Edit, Trash, Radial } from 'grommet-icons';\n\nconst ICON_MAP = {\n  'change': <Edit />,\n  'add': <AddCircle />,\n  'remove': <Trash />,\n}\n\nconst HistoryItem = ({ commitTitle, timestamp, author, onClick }) => {\n  const commitPredicate = commitTitle.split(' ')[0].toLowerCase()\n\n  return (\n    <Box\n      className='pointer'\n      direction='row'\n      onClick={() => onClick()}\n    >\n      <Box\n        fill='vertical'\n        border={{\n          side: 'left',\n          color: 'dark-3'\n        }}\n        justify='center'\n      >\n        <Box\n          style={{\n            backgroundColor: 'white',\n            marginLeft: '-11px',\n          }}\n        >\n          {ICON_MAP[commitPredicate] || <Radial />}\n        </Box>\n      </Box>\n      <Box pad='small' justify='center'>\n        <Text>{commitTitle}</Text>\n        <Text size='small'>\n          {`${new Date(timestamp).toDateString()} by ${author}`}\n        </Text>\n      </Box>\n    </Box>\n  );\n}\n \nexport default HistoryItem;","import React from 'react';\nimport { Box, Text } from 'grommet';\n\nimport HistoryItem from './HistoryItem';\n\nconst History = ({ history, onClickItem }) => {\n  return (\n    <Box\n      pad='medium'\n      fill='vertical'\n      width='20%'\n    >\n      <Box\n        fill='vertical'\n        pad='medium'\n        elevation='medium'\n        overflow={{ vertical: 'scroll' }}\n      >\n        <Text color='brand' weight='bold'>\n          History\n        </Text>\n        <Box pad={{ vertical: 'small' }}>\n          <HistoryItem\n            commitTitle='Current version'\n            timestamp={new Date().getTime()}\n            author={'You'}\n            onClick={() => onClickItem(null)}\n          />\n          {history.map(({ id, commitTitle, timestamp, author }) => (\n            <HistoryItem\n              key={id}\n              commitTitle={commitTitle}\n              timestamp={timestamp}\n              author={author}\n              onClick={() => onClickItem(id)}\n            />\n          ))}\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n \nexport default History;","import React, { Component } from 'react';\nimport { Box } from 'grommet';\n\nimport Header from './components/Header';\nimport Editor from './components/Editor';\nimport Preview from './components/Preview';\nimport DiffPreview from './components/DiffPreview';\nimport History from './components/History';\n\n\nconst mockHistory = [\n  {\n    id: 1,\n    commitTitle: 'Add paragraph about dogs',\n    timestamp: 1555083960769,\n    author: 'Dong-Ha Kim'\n  },\n  {\n    id: 2,\n    commitTitle: 'Change paragraph about cats',\n    timestamp: 1555083960769,\n    author: 'Dong-Ha Kim'\n  },\n  {\n    id: 3,\n    commitTitle: 'Remove errors',\n    timestamp: 1555083960769,\n    author: 'Dong-Ha Kim'\n  }\n]\n\nclass App extends Component {\n  state = {\n    text: '',\n    activeVersion: null\n  }\n\n  handleEditorTextChange = editedText => {\n    this.setState({ text: editedText })\n  }\n\n  handleClickHistoryItem = id => {\n    this.setState({ activeVersion: id })\n  }\n\n  render() {\n    return (\n      <Box>\n        <Header />\n        <Box direction='row' fill='vertical'>\n          {this.state.activeVersion ? (\n            <DiffPreview versionId={this.state.activeVersion} />\n          ) : (\n            <React.Fragment>\n              <Editor\n                text={this.state.text}\n                onChangeText={this.handleEditorTextChange}\n              />\n              <Preview rawText={this.state.text} />\n            </React.Fragment>\n          )}\n          <History\n            history={mockHistory}\n            onClickItem={this.handleClickHistoryItem}\n          />\n        </Box>\n      </Box>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}