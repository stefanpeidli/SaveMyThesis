{"version":3,"sources":["components/Header.js","components/Editor.js","components/Preview.js","utils/timestamp.js","services/versionService.js","components/DiffPreview.js","components/HistoryItem.js","components/History.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","Box","background","height","justify","pad","Editor","_ref","text","onChangeText","fill","width","TextArea","placeholder","value","onChange","event","target","Preview","rawText","border","overflow","vertical","Markdown","secToMs","version","Object","objectSpread","timestamp","versionInstance","axios","create","baseURL","timeout","fetchHistory","asyncToGenerator","regenerator_default","mark","_callee","response","history","wrap","_context","prev","next","get","sent","data","map","item","abrupt","t0","console","error","stop","apply","this","arguments","postVersion","_ref2","_callee2","author","postedVersion","_context2","post","_x","_x2","fetchVersion","_ref3","_callee3","versionId","fetchedVersion","_context3","concat","_x3","DiffPreview","previousVersionId","_useState","useState","_useState2","slicedToArray","fetching","setFetching","_useState3","_useState4","activeVersion","setActiveVersion","_useState5","_useState6","previousVersion","setPreviousVersion","fetchActiveVersion","fetchedActiveVersion","fetchPreviousVersion","fetchedPreviousVersion","useEffect","align","direction","react_loading_default","type","color","Heading","level","commitTitle","Text","weight","Date","toDateString","commitText","Paragraph","lib_default","oldValue","newValue","ICON_MAP","change","Edit","add","AddCircle","remove","Trash","HistoryItem","onClick","commitPredicate","split","toLowerCase","className","flex","side","style","backgroundColor","marginLeft","Radial","size","History","onClickItem","elevation","components_HistoryItem","getTime","_id","key","App","state","activeVersionId","handleEditorTextChange","editedText","_this","setState","handleClickHistoryItem","clickedId","clickedVersionIndex","findIndex","length","setTimeout","Keyboard","onTab","components_Header","components_DiffPreview","Fragment","components_Editor","components_Preview","components_History","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6145b919.chunk.js","sourcesContent":["import React from 'react';\nimport { Box } from 'grommet';\n\nconst Header = () => {\n  return (\n    <Box\n      background='brand'\n      height='xxsmall'\n      justify='center'\n      pad='small'\n    >\n      SaveMyThesis\n    </Box>\n  );\n}\n \nexport default Header;","import React from 'react';\nimport { Box, TextArea } from 'grommet';\n\nconst Editor = ({ text, onChangeText }) => {\n  return (\n    <Box\n      pad='medium'\n      fill='vertical'\n      width='40%'\n    >\n      <TextArea\n        placeholder='Start writing your text here!'\n        fill\n        value={text}\n        onChange={event => onChangeText(event.target.value)}\n      />\n    </Box>\n  );\n}\n \nexport default Editor;\n","import React from 'react';\nimport { Box, Markdown } from 'grommet';\n\nconst Preview = ({ rawText }) => {\n  return (\n    <Box\n      pad='medium'\n      fill='vertical'\n      width='40%'\n    >\n      <Box\n        border='all'\n        fill='vertical'\n        pad='medium'\n        overflow={{ vertical: 'scroll' }}\n      >\n        <Markdown>\n          {rawText}\n        </Markdown>\n      </Box>\n    </Box>\n  );\n}\n \nexport default Preview;","export const secToMs = (version) => {\n  return {\n    ...version,\n    timestamp: version.timestamp * 1000\n  }\n}","import axios from 'axios'\n\nimport { secToMs } from '../utils/timestamp'\n\nconst versionInstance = axios.create({\n  baseURL: 'https://savemythesis.westeurope.cloudapp.azure.com:5000',\n  timeout: 1000,\n});\n\nexport const fetchHistory = async () => {\n  try {\n    const response = await versionInstance.get('/history')\n    const history = response.data.map(item => secToMs(item))\n    return history\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport const postVersion = async (text, author) => {\n  try {\n    const response = await versionInstance.post('/version', { text, author })\n    const postedVersion = secToMs(response.data)\n    return postedVersion\n  } catch (error) {\n    console.error(error)\n  }\n}\n\nexport const fetchVersion = async (versionId) => {\n  try {\n    const response = await versionInstance.get(`/version/${versionId}`)\n    const fetchedVersion = secToMs(response.data)\n    return fetchedVersion\n  } catch (error) {\n    console.error(error)\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport { Box, Heading, Paragraph, Text } from 'grommet';\nimport ReactDiffViewer from 'react-diff-viewer';\nimport ReactLoading from 'react-loading';\n\nimport { fetchVersion } from '../services/versionService';\n\nconst DiffPreview = ({ versionId, previousVersionId }) => {\n  const [ fetching, setFetching ] = useState(true)\n  const [ activeVersion, setActiveVersion ] = useState({})\n  const [ previousVersion, setPreviousVersion ] = useState({})\n\n  const fetchActiveVersion = async () => {\n    setFetching(true)\n    const fetchedActiveVersion = await fetchVersion(versionId)\n    setActiveVersion(fetchedActiveVersion)\n    setFetching(false)\n  }\n\n  const fetchPreviousVersion = async () => {\n    setFetching(true)\n    const fetchedPreviousVersion = previousVersionId\n      ? await fetchVersion(previousVersionId)\n      : {}\n    setPreviousVersion(fetchedPreviousVersion)\n    setFetching(false)\n  }\n\n  useEffect(() => {\n    fetchActiveVersion()\n    fetchPreviousVersion()\n  }, [versionId, previousVersionId])\n\n  return (\n    <Box\n      pad='medium'\n      fill='vertical'\n      width='80%'\n    >\n      {fetching ? (\n        <Box\n          justify='center'\n          align='center'\n          direction='row'\n          fill\n        >\n          <ReactLoading\n            type='spin'\n            color='#7D4CDB'\n            height='150px'\n            width='150px'\n          />\n        </Box>\n      ) : (\n        <Box\n          border='all'\n          fill='vertical'\n          pad='medium'\n          overflow='scroll'\n        >\n          <Heading level={3}>\n            {activeVersion.commitTitle}\n            <Text weight='normal'>\n              {` - ${new Date(activeVersion.timestamp).toDateString()} by ${activeVersion.author}`}\n            </Text>\n          </Heading>\n          <Text>{activeVersion.commitText}</Text>\n          <Paragraph />\n          <ReactDiffViewer\n            oldValue={previousVersion.text}\n            newValue={activeVersion.text}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n}\n \nexport default DiffPreview;","import React from 'react';\nimport { Box, Text } from 'grommet';\nimport { AddCircle, Edit, Trash, Radial } from 'grommet-icons';\n\nconst ICON_MAP = {\n  'change': <Edit />,\n  'add': <AddCircle />,\n  'remove': <Trash />,\n}\n\nconst HistoryItem = ({ commitTitle, timestamp, author, onClick }) => {\n  const commitPredicate = commitTitle.split(' ')[0].toLowerCase()\n\n  return (\n    <Box\n      className='pointer'\n      direction='row'\n      onClick={() => onClick()}\n      flex={false}\n    >\n      <Box\n        fill='vertical'\n        border={{\n          side: 'left',\n          color: 'dark-3'\n        }}\n        justify='center'\n        height='small'\n        >\n        <Box\n          style={{\n            backgroundColor: 'white',\n            marginLeft: '-11px',\n          }}\n        >\n          {ICON_MAP[commitPredicate] || <Radial />}\n        </Box>\n      </Box>\n      <Box pad='small' justify='center'>\n        <Text>{commitTitle}</Text>\n        <Text size='small'>\n          {`${new Date(timestamp).toDateString()} by ${author}`}\n        </Text>\n      </Box>\n    </Box>\n  );\n}\n \nexport default HistoryItem;","import React from 'react';\nimport { Box, Text } from 'grommet';\n\nimport HistoryItem from './HistoryItem';\n\nconst History = ({ history, onClickItem }) => {\n  return (\n    <Box\n      pad='medium'\n      fill='vertical'\n      width='20%'\n    >\n      <Box\n        fill='vertical'\n        pad='medium'\n        elevation='medium'\n        overflow={{ vertical: 'scroll' }}\n      >\n        <Text color='brand' weight='bold'>\n          History\n        </Text>\n        <Box pad={{ vertical: 'small' }}>\n          <HistoryItem\n            commitTitle='Current version'\n            timestamp={new Date().getTime()}\n            author={'You'}\n            onClick={() => onClickItem(null)}\n          />\n          {history.map(({ _id, commitTitle, timestamp, author }) => (\n            <HistoryItem\n              key={_id}\n              commitTitle={commitTitle}\n              timestamp={timestamp}\n              author={author}\n              onClick={() => onClickItem(_id)}\n            />\n          ))}\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n \nexport default History;","import React, { Component } from 'react';\nimport { Box, Keyboard } from 'grommet';\n\nimport Header from './components/Header';\nimport Editor from './components/Editor';\nimport Preview from './components/Preview';\nimport DiffPreview from './components/DiffPreview';\nimport History from './components/History';\n\nimport { postVersion, fetchHistory } from './services/versionService';\n\nclass App extends Component {\n  state = {\n    text: '',\n    activeVersionId: null,\n    previousVersionId: null,\n    history: []\n  }\n\n  async componentDidMount() {\n    const history = await fetchHistory()\n    this.setState({ history })\n  }\n\n  handleEditorTextChange = editedText => {\n    this.setState({ text: editedText })\n  }\n\n  handleClickHistoryItem = clickedId => {\n    const clickedVersionIndex = this.state.history.findIndex(\n      ({ _id }) => _id === clickedId\n    )\n    if (clickedVersionIndex === this.state.history.length - 1) {\n      this.setState({\n        activeVersionId: clickedId,\n        previousVersionId: clickedId\n      })\n    } else {\n      this.setState({\n        activeVersionId: clickedId,\n        previousVersionId: this.state.history[clickedVersionIndex + 1]._id\n      })\n    }\n  }\n\n  postVersion = async () => {\n    await postVersion(this.state.text, 'Author')\n    setTimeout(async () => {\n      const history = await fetchHistory()\n      this.setState({ history })\n    }, 2000)\n  }\n\n  render() {\n    return (\n      <Keyboard\n        onTab={this.postVersion}\n        target='document'\n      >\n        <Box>\n          <Header />\n          <Box direction='row' fill='vertical'>\n            {this.state.activeVersionId ? (\n              <DiffPreview\n                versionId={this.state.activeVersionId}\n                previousVersionId={this.state.previousVersionId}\n              />\n            ) : (\n              <React.Fragment>\n                <Editor\n                  text={this.state.text}\n                  onChangeText={this.handleEditorTextChange}\n                />\n                <Preview rawText={this.state.text} />\n              </React.Fragment>\n            )}\n            <History\n              history={this.state.history}\n              onClickItem={this.handleClickHistoryItem}\n              />\n          </Box>\n        </Box>\n      </Keyboard>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}